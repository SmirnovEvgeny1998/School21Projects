#ifndef CALC_MODEL_H
#define CALC_MODEL_H

#include <math.h>

#include <iostream>
#include <string>

/*!
    @brief Пространство имен включающее в себя функции для работы обычного,
   кредитного и вкладового калькуляторов
    @author burnerwa
    @version 1.0
    @date 08.12.2023
    @details Пространство имен и все методы внутри созданы на основе проэкта s21
   SmartCalc написанном на языке си,
*/
namespace s21 {

class calc_controller {
 public:
  /**
      @brief Базовая инициализация
   */
  calc_controller();

  /**
      @brief Метод для проверки корректности поданной на рассчет строки. По сути
     является оберткой над несколькими различными методами проверки.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода и int, от которого зависит, будет ли "х" считаться числом или
     неизвестным знаком и вызывать ошибку.
      @return Возвращает код ошибки: 0 - ошибок нет, 1 - на ввод подана пустая
     строка, 2 - начало уравнения неверно, 3 - проблема в записи точки, 4 -
     проблема в записи скобок, 5 - комплексная ошибка заполнения, 6 - было
     подано лишь число, 7 - найденный икс при необходимости чисто численного
     уравнения, 8 - проверка скобок математических функций.
      @param line Строка-выражение.
      @param check_x Интовое число 1 - принимать икс за символ 0 - за
     неизвестное число.
   */
  int check_equation_line(std::string line, int check_x);

  /**
      @brief Комплексная проверка строки на верный формат выражения.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_correctness(std::string line);

  /**
      @brief Проверка начала строки на верный формат выражения.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_begining(std::string string);

  /**
      @brief Проверка точек строки на верный формат выражения.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_points(std::string string);

  /**
      @brief Проверка скобок строки на верный формат выражения.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_brackets(std::string string);

  /**
      @brief Проверка того, что строка является обычным числом.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_only_number(std::string string);

  /**
      @brief Проверка скобок математических функий в строке.
      @details Принимает строку длинной от 5 знаков из-за особенностей работы
     метода.
      @return Возвращает true в случае ошибки и false если ошибки нет.
      @param line Строка-выражение.
   */
  bool check_sin_brackets(std::string string);

  /**
      @brief Функция разбивающая строку на массив строк, каждая ячейка которого
     является числом или знаком. Изначальная последовательность сохраняется.
      @details Принимает строку выражения, bool указатель на переменную ошибки,
     указатель на длинну массива int.
      @return Возвращает массив разбитых строк.
      @param string Строка-выражение.
      @param no_error Указатель флага ошибки, заполняется внутри функции.
      @param length Указатель длинны массива, заполняется внутри функции.
   */
  std::string *break_string(std::string string, bool *no_error, int *length);

  /**
          @brief Функция преобразующая массив строк в инфиксной нотации в
     обратную польскую.
          @details Принимает массив строк выражения в инфикскной нотации, длинну
     массива int.
          @return Возвращает массив разбитых строк, преобразованный в
     постфиксную нотацию.
          @param string Указатель на массив строк выражения в инфиксной нотации.
          @param length Длинна массива.
       */
  std::string *string_to_djicstra(std::string *string, int length);

  /**
          @brief Функция вычисляющая массив строк в постфиксной нотации.
          @details Принимает массив строк выражения в постфиксной нотации,
     длинну массива int.
          @return Возвращает результат выражения.
          @param string Указатель на массив строк выражения в постфиксной
     нотации.
          @param length Длинна массива.
       */
  double calculation(std::string *string, int length);

  /**
          @brief Побочный метод от метода cdlculation, вычисляет математические
     операции с одной переменной.
          @details Принимает массив строк выражения в постфиксной нотации,
     указатель на индекс массива int, массив значений в численном формате.
          @return Возвращает результат выражения.
          @param string Указатель на массив строк выражения в постфиксной
     нотации.
          @param pointer Индекс после вычиляемого числа в массиве значений.
          @param precision_massive Массив значений в формате double, имеет в
     себе только числа.
       */
  void calculation_one_var(std::string *string, int pointer,
                           double *precision_massive);

  /**
          @brief Побочный метод от метода cdlculation, вычисляет математические
     операции с двумя переменными.
          @details Принимает массив строк выражения в постфиксной нотации,
     указатель на индекс массива int, массив значений в численном формате.
          @return Возвращает результат выражения.
          @param string Указатель на массив строк выражения в постфиксной
     нотации.
          @param pointer Индекс после второго вычиляемого числа в массиве
     значений.
          @param precision_massive Массив значений в формате double, имеет в
     себе только числа.
       */
  void calculation_two_var(std::string *string, int pointer,
                           double *precision_massive);

  /**
          @brief Метод для стирания одной ячейки массива и переписи последующих
     ячеек на одну стоящую перед ними, сродни list.
          @details Принимает массив строк или double, длинну массива int, индекс
     удаляемого значения int.
          @param string Указатель на массив строк.
          @param length Длинна массива.
          @param position Индекс удаляемого значения.
       */
  void pop(std::string *string, int length, int position);

  /**
          @brief Метод для стирания одной ячейки массива и переписи последующих
     ячеек на одну стоящую перед ними, сродни list.
          @details Принимает массив строк или double, длинну массива int, индекс
     удаляемого значения int.
          @param string Указатель на массив строк.
          @param length Длинна массива.
          @param position Индекс удаляемого значения.
       */
  void pop(double *string, int length, int position);

  /**
          @brief Преобразует числа в научной нотации в обычную форму.
          @details Принимает массив строк выражения в инфиксной нотации.
          @return Возвращает преобразованную строку.
          @param string Строка выражения в инфиксной нотации.
       */
  std::string change_scientific_notation(std::string string);
};

};  // namespace s21

#endif  // CALC_MODEL_H
