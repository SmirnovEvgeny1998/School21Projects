#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <regex.h>
#include <getopt.h>

void text_comarer(char *massive, int *result);
int check(char *l_massive, char *s_massive);
int max(int a, int b);
int which_flag(char *massive_1, int mode, int current_flag);
void pure_cat(char *path);
void cat_noblank_numeration(char *path);
void cat_string_end(char *path);
void cat_string_numeration(char *path);
void cat_squeeze_blanks(char *path);
void cat_tabulation(char *path);
void space_print(int number);
int is_couple(char *massive);
void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path);
void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path);

/*
 -написать интегральные тесты
 -проверить legacy obsolete в документации posix 2017???
 -проверить на стиль
 -realloc заюзать во всех маллоках если данные больше хранилища???
 -char 0 работает проверить
 -ошибка ориг кэта о отсутствии фаила происходит прямо посреди перечисления при флаге б
 -спорный момент с счетом пустых строк оригинальный кет не считает последнюю строку если в конце 2 строки стостоящих только из энтеров
 -cat  -n -s в конце строки если 3 и больше энтеров он отображает 2 вместо 1
 -cat флаги после фаилов не должны работать
 -переписать новый кэт в отдельные фаилы и проверить мэйком
 
 список изменений с основным трай кетом
 -для -b добавлены табы вместо пробелов + в 1 строке пишется счет отдельно от ваила
 -требования для е и т быть в паре с в убраны так же как и большие буквы без в(эти пары в проверке теперь дают эрор 1)
 */

int main(int argc, char *argv[]) {
    
    const char* short_options = "bevEnstT";

    const struct option long_options[] = {
        { "number-nonblank", no_argument, NULL, 'b' },
        { "number", no_argument, NULL, 'n' },
        { "squeeze-blank", no_argument, NULL, 's' },
        { NULL, 0, NULL, 0 }
    };

    int error = 1;
    int rez;
    int option_index;
    int flag_b = 0, flag_e = 0, flag_v = 0, flag_E = 0, flag_n = 0, flag_s = 0, flag_t = 0, flag_T = 0;
    while ((rez=getopt_long(argc,argv,short_options,
        long_options,&option_index))!=-1){

        switch(rez){
            case 'b': {
                flag_b = 1;
                break;
            };
            case 'e': {
                flag_e = 1;
                break;
            };
            case 'v': {
                flag_v = 1;
                break;
            };
            case 'E': {
                flag_E = 1;
                break;
            };
            case 'n': {
                flag_n = 1;
                break;
            };
            case 's': {
                flag_s = 1;
                break;
            };
            case 't': {
                flag_t = 1;
                break;
            };
            case 'T': {
                flag_T = 1;
                break;
            };
            case '?': default: {
                error = 0;
                break;
            };
        };
    };
    if (flag_v == 1 && flag_e == 0 && flag_t == 0) {
        error = 1;
    }
    if (flag_e == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_t == 1 && flag_v == 0) {
        error = 1;
    }
    if (flag_T == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1 && flag_v == 1) {
        error = 1;
    }
    if (flag_E == 1) {
        flag_e = 1;
    }
    if (flag_T == 1) {
        flag_t = 1;
    }
    if (flag_b == 1 && flag_n == 1) {
        flag_n = 0;
    }
    if (flag_v == 1 && flag_e == 1) {
        flag_v = 0;
    }
    if (flag_v == 1 && flag_t == 1) {
        flag_v = 0;
    }
    if (error == 1) {
        for (int i = 1; i < argc; i++) {
            if (argv[i][0] != '-') {
                //use_cat(flag_b, flag_e, flag_v, flag_E, flag_n, flag_s, flag_t, flag_T, argv[i]);
                all_cat(flag_b, flag_e, flag_n, flag_s, flag_t, flag_v, argv[i]);
            }
        }
    } else {
        printf("Something gone wrong");
    }
}

void pure_cat(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            printf("%c", temp);
            temp = getc(fp);
        }
    }
    fclose(fp);
}

void cat_noblank_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    printf("%c", temp);
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                space_print(counter);
                printf("  ");
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_string_end(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                printf("$");
                printf("%c", temp);
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void cat_string_numeration(char *path) {
    FILE *fp;
    char temp;
    int counter = 1, exist = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                    printf("%c", temp);
                    counter++;
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    counter++;
                    exist = 0;
                    temp = getc(fp);
                }
            } else {
                if (exist == 0) {
                    space_print(counter);
                    printf("  ");
                }
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_squeeze_blanks(char *path) {
    FILE *fp;
    char temp;
    int exist = 0, blanks = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 10) {
                if (exist == 0) {
                    if (blanks != 0) {
                        blanks++;
                        temp = getc(fp);
                    } else {
                        blanks++;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                } else {
                    printf("%c", temp);
                    exist = 0;
                    blanks = 0;
                    temp = getc(fp);
                }
            } else {
                exist = 1;
                while (temp != 10 && temp != EOF) {
                    printf("%c", temp);
                    temp = getc(fp);
                }
            }
        }
    }
    fclose(fp);
}

void cat_tabulation(char *path) {
    FILE *fp;
    char temp;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        while (temp != EOF) {
            if (temp == 9) {
                printf("^I");
                temp = getc(fp);
            } else {
                printf("%c", temp);
                temp = getc(fp);
            }
        }
    }
    fclose(fp);
}

void space_print(int number) {
    if (number >= 0 && number < 10) {
        printf("     ");
        printf("%d", number);
    } else if (number >= 10 && number < 100) {
        printf("    ");
        printf("%d", number);
    } else if (number >= 100 && number < 1000) {
        printf("   ");
        printf("%d", number);
    } else if (number >= 1000 && number < 10000) {
        printf("  ");
        printf("%d", number);
    } else if (number >= 10000 && number < 100000) {
        printf(" ");
        printf("%d", number);
    } else if (number >= 100000 && number < 1000000) {
        printf("%d", number);
    }
}

void use_cat(int flag_b, int flag_e, int flag_v, int flag_E, int flag_n, int flag_s, int flag_t, int flag_T, char *path) {
    if (flag_b == 1) {
        cat_noblank_numeration(path);
    } else if (flag_e == 1) {
        cat_string_end(path);
    } else if (flag_v == 1) {
        if (flag_e == 1) {
            cat_string_end(path);
        } else if(flag_t == 1) {
            cat_tabulation(path);
        }
    } else if (flag_E == 1) {
        cat_string_end(path);
    } else if (flag_n == 1) {
        cat_string_numeration(path);
    } else if (flag_s == 1) {
        cat_squeeze_blanks(path);
    } else if (flag_t == 1) {
        cat_tabulation(path);
    } else if (flag_T == 1) {
        cat_tabulation(path);
    } else {
        pure_cat(path);
    }
}

void all_cat(int flag_b, int flag_e, int flag_n, int flag_s, int flag_t, int flag_v, char *path) {
    FILE *fp;
    char temp, tabulation = 9;;
    int exist = 0, blanks = 0, counter = 1, first = 0;
    fp = fopen(path, "r");
    if (fp != NULL) {
        temp = getc(fp);
        if (flag_n == 1) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
        }
        if (flag_b == 1 && temp != 10 && temp != EOF) {
            space_print(counter);
            printf("%c",tabulation);
            counter++;
            first = 1;
        }
        while (temp != EOF) {
            if(flag_s == 1) {
                if (temp == 10) {
                    first = 0;
                    if (exist == 0) {
                        if (blanks != 0) {
                            blanks++;
                            temp = getc(fp);
                        } else {
                            blanks++;
                            if (flag_e == 1) {
                                if (temp == 10) {
                                    printf("$");
                                }
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            } else if(flag_v == 1) {
                                if (temp < 32 && temp != 10 && temp != 9) {
                                    printf("^");
                                    temp += 64;
                                    printf("%c", temp);
                                    temp = getc(fp);
                                }
                                if (temp >= 127) {
                                    printf("^?");
                                    temp = getc(fp);
                                }
                            }
                            printf("%c", temp);
                            if (flag_n == 1) {
                                temp = getc(fp);
                                if (temp != EOF) {
                                    ungetc(temp, fp);
                                    space_print(counter);
                                    printf("%c",tabulation);
                                    counter++;
                                } else {
                                    ungetc(temp, fp);
                                }
                            }
                            temp = getc(fp);
                        }
                    } else {
                        if (flag_e == 1) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        }
                        printf("%c", temp);
                        exist = 0;
                        blanks = 0;
                        if (flag_n == 1) {
                            temp = getc(fp);
                            if (temp != EOF) {
                                ungetc(temp, fp);
                                space_print(counter);
                                printf("%c",tabulation);
                                counter++;
                            }
                        }
                        temp = getc(fp);
                    }
                } else {
                    if (flag_b == 1 && first == 0) {
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                        first = 1;
                    }
                    if (flag_e == 1) {
                        if (temp == 10) {
                            printf("$");
                        }
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    } else if(flag_v == 1) {
                        if (temp < 32 && temp != 10 && temp != 9) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                        if (temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        }
                    }
                    exist = 1;
                    while (temp != 10 && temp != EOF) {
                        if (flag_t == 1 && temp < 32 && temp != 10) {
                            printf("^");
                            temp += 64;
                            printf("%c", temp);
                            temp = getc(fp);
                        } else if(flag_t == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if (flag_e == 1 && temp < 32 && temp != 9) {
                            if (temp == 10) {
                                printf("$");
                            }
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_e == 1 && temp >= 127) {
                            printf("^?");
                            temp = getc(fp);
                        } else if(flag_v == 1 && temp < 32 && temp != 9 && temp != 10) {
                            if (temp < 32 && temp != 10 && temp != 9) {
                                printf("^");
                                temp += 64;
                                printf("%c", temp);
                                temp = getc(fp);
                            }
                        } else if(flag_v == 1 && temp >= 127) {
                            if (temp >= 127) {
                                printf("^?");
                                temp = getc(fp);
                            }
                        } else {
                            printf("%c", temp);
                            temp = getc(fp);
                        }
                    }
                }
            } else {
                if (flag_e == 1) {
                    if (temp == 10) {
                        printf("$");
                    }
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                } else if(flag_v == 1) {
                    if (temp < 32 && temp != 10 && temp != 9) {
                        printf("^");
                        temp += 64;
                        printf("%c", temp);
                        temp = getc(fp);
                    }
                    if (temp >= 127) {
                        printf("^?");
                        temp = getc(fp);
                    }
                }
                if (flag_t == 1 && temp < 32 && temp != 10) {
                    printf("^");
                    temp += 64;
                    printf("%c", temp);
                    temp = getc(fp);
                } else if(flag_t == 1 && temp >= 127) {
                    printf("^?");
                    temp = getc(fp);
                } else {
                    printf("%c", temp);
                    if (flag_n == 1 && temp == 10) {
                        temp = getc(fp);
                        if (temp != EOF) {
                            ungetc(temp, fp);
                            space_print(counter);
                            printf("%c",tabulation);
                            counter++;
                            temp = getc(fp);
                        }
                    } else if (flag_b == 1 && temp == 10) {
                        while (temp == 10) {
                            temp = getc(fp);
                            if (temp == 10) {
                                if (flag_e == 1) {
                                    printf("$");
                                }
                                printf("%c", temp);
                            }
                        }
                        space_print(counter);
                        printf("%c",tabulation);
                        counter++;
                    } else {
                        exist = 1;
                        temp = getc(fp);
                    }
                }
            }
        }
    } else {
        printf("\nError %s: No such file or directory\n", path);
    }
    fclose(fp);
}

/*
 old code
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 #include "cat_functions.h"
 #include "other_functions.h"

 int main() {
     char adress[300], temp, small[300], *full_adress_main = NULL;
     int counter = 0, small_counter = 0, first_space = 0, info = 0, error = 1, is_file_name = 0, was_a_cat = 0, flag_number = -1;
     temp = getchar();
     for (int i = 0; i < 300; i++) {
         adress[i] = '\0';
     }
     while (temp != EOF && temp != 10) {
         adress[counter] = temp;
         counter++;
         temp = getchar();
     }
     for (int i = 0; i < 300; i++) {
         small[i] = '\0';
     }
     counter = 0;
     while (adress[counter] != '\0' && adress[counter] != 10 && error == 1) {
         if (adress[counter] == 32 && first_space == 0) {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             first_space = 1;
         } else if (adress[counter] == 32 && first_space == 1 && info == 0) {
             counter++;
         } else if (adress[counter] == 32 && info == 1) {
             small[small_counter] = adress[counter];
             full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
             if (error == 1) {
                 flag_number = which_flag(small, is_file_name, flag_number);
             }
             for (int i = 0; i < 300; i++) {
                 small[i] = '\0';
             }
             first_space = 0;
             info = 0;
             small_counter = 0;
         } else {
             small[small_counter] = adress[counter];
             small_counter++;
             counter++;
             info = 1;
             first_space = 1;
             if (adress[counter] == '\0' || adress[counter] == 10) {
                 full_adress_main = text_comarer(small, &is_file_name, &was_a_cat, &error);
                 if (error == 1) {
                     flag_number = which_flag(small, is_file_name, flag_number);
                 }
             }
         }
     }
     if (is_file_name == 0) {
         error = 0;
     }
     if (error == 1) {
         error = is_couple(adress);
     }
     if (error == 1) {
         if (flag_number == 0) {
             pure_cat(full_adress_main);
         } else if (flag_number == 1) {
             cat_noblank_numeration(full_adress_main);
         } else if (flag_number == 2) {
             cat_string_end(full_adress_main);
         } else if (flag_number == 3) {
             cat_string_numeration(full_adress_main);
         } else if (flag_number == 4) {
             cat_squeeze_blanks(full_adress_main);
         } else if (flag_number == 5) {
             cat_tabulation(full_adress_main);
         }
     } else {
         printf("Something gone wrong");
     }
     if (full_adress_main != NULL) {
         free(full_adress_main);
     }
 }

 #include "cat_functions.h"
 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 void pure_cat(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             printf("%c", temp);
             temp = getc(fp);
         }
     }
     fclose(fp);
 }

 void cat_noblank_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     printf("%c", temp);
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 space_print(counter);
                 printf("  ");
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_string_end(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 printf("$");
                 printf("%c", temp);
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 void cat_string_numeration(char *path) {
     FILE *fp;
     char temp;
     int counter = 1, exist = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                     printf("%c", temp);
                     counter++;
                     temp = getc(fp);
                 } else {
                     printf("%c", temp);
                     counter++;
                     exist = 0;
                     temp = getc(fp);
                 }
             } else {
                 if (exist == 0) {
                     space_print(counter);
                     printf("  ");
                 }
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_squeeze_blanks(char *path) {
     FILE *fp;
     char temp;
     int exist = 0, blanks = 0;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 10) {
                 if (exist == 0) {
                     if (blanks != 0) {
                         blanks++;
                         temp = getc(fp);
                     } else {
                         blanks++;
                         printf("%c", temp);
                         temp = getc(fp);
                     }
                 } else {
                     printf("%c", temp);
                     exist = 0;
                     blanks = 0;
                     temp = getc(fp);
                 }
             } else {
                 exist = 1;
                 while (temp != 10 && temp != EOF) {
                     printf("%c", temp);
                     temp = getc(fp);
                 }
             }
         }
     }
     fclose(fp);
 }

 void cat_tabulation(char *path) {
     FILE *fp;
     char temp;
     fp = fopen(path, "r");
     if (fp != NULL) {
         temp = getc(fp);
         while (temp != EOF) {
             if (temp == 9) {
                 printf("^I");
                 temp = getc(fp);
             } else {
                 printf("%c", temp);
                 temp = getc(fp);
             }
         }
     }
     fclose(fp);
 }

 #include "other_functions.h"

 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>

 char* text_comarer(char *massive, int *name, int *cat, int *result) {
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     char is_adress[300], *full_adress = NULL;
     int length = 0, is_adress_count = 0;
     *result = 0;
     if (*cat == 0) {
         *result = max(check(massive, cat1), *result);
         *result = max(check(massive, cat2), *result);
         if (*result == 1) {
             *cat = 1;
         }
     } else {
         for (int i = 0; i < 1; i++) {
             *result = max(check(massive, cat1), *result);
             *result = max(check(massive, cat2), *result);
             *result = max(check(massive, flag_b), *result);
             *result = max(check(massive, flag_num_nob), *result);
             *result = max(check(massive, flag_e), *result);
             *result = max(check(massive, flag_v), *result);
             *result = max(check(massive, flag_E), *result);
             *result = max(check(massive, flag_n), *result);
             *result = max(check(massive, flag_number), *result);
             *result = max(check(massive, flag_s), *result);
             *result = max(check(massive, flag_squeeze), *result);
             *result = max(check(massive, flag_t), *result);
             *result = max(check(massive, flag_T), *result);
         }
     }
     if (*cat == 1 && *name == 0 && *result == 0) {
         FILE *fp;
         length = strlen(massive);
         for (int i = 0; i < 300; i++) {
             is_adress[i] = '\0';
         }
         for (int i = 0; i < length; i++) {
             if (massive[i] == 32) {
                 continue;
             } else {
                 is_adress[is_adress_count] = massive[i];
                 is_adress_count++;
             }
         }
         fp = fopen(is_adress, "r");
         if (fp == NULL) {
             *result = 0;
         } else {
             *result = 1;
             *name = 1;
             full_adress = malloc(length * sizeof(char));
             for (int i = 0; i < length; i++) {
                 full_adress[i] = is_adress[i];
             }
         }
         fclose(fp);
     }
     if (full_adress == NULL) {
         full_adress = malloc(1 * sizeof(char));
     }
     return full_adress;
 }

 int check(char *l_massive, char *s_massive) {
     int check_result = 1;
     int counter = strlen(l_massive);
     for (int i = 0; i <= counter; i++) {
         if (l_massive[i] != s_massive[i]) {
             check_result = 0;
             break;
         }
     }
     return check_result;
 }

 int max(int a, int b) {
     int result;
     if (a >= b) {
         result = a;
     } else {
         result = b;
     }
     return result;
 }

 int which_flag(char *massive_1, int mode, int current_flag) {
     int flag_result = -1;
     char cat1[] = "cat ", cat2[] = " cat ", flag_b[] = " -b ", flag_num_nob[] = " --number-nonblank ", flag_e[] = " -e ", flag_v[] = " -v ", flag_E[] = " -E ", flag_n[] = " -n ", flag_number[] = " --number ", flag_s[] = " -s ", flag_squeeze[] = " --squeeze-blank ", flag_t[] = " -t ", flag_T[] = " -T ";
     if (mode == 0) {
         if (check(massive_1, cat1) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, cat2) == 1) {
             flag_result = 0;
         }
         if (check(massive_1, flag_b) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_num_nob) == 1) {
             flag_result = 1;
         }
         if (check(massive_1, flag_e) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_v) == 1) {
             flag_result = current_flag;
         }
         if (check(massive_1, flag_E) == 1) {
             flag_result = 2;
         }
         if (check(massive_1, flag_n) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_number) == 1) {
             flag_result = 3;
         }
         if (check(massive_1, flag_s) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_squeeze) == 1) {
             flag_result = 4;
         }
         if (check(massive_1, flag_t) == 1) {
             flag_result = 5;
         }
         if (check(massive_1, flag_T) == 1) {
             flag_result = 5;
         }
     } else {
         flag_result = current_flag;
     }
     return flag_result;
 }

 void space_print(int number) {
     if (number >= 0 && number < 10) {
         printf("     ");
         printf("%d", number);
     } else if (number >= 10 && number < 100) {
         printf("    ");
         printf("%d", number);
     } else if (number >= 100 && number < 1000) {
         printf("   ");
         printf("%d", number);
     } else if (number >= 1000 && number < 10000) {
         printf("  ");
         printf("%d", number);
     } else if (number >= 10000 && number < 100000) {
         printf(" ");
         printf("%d", number);
     } else if (number >= 100000 && number < 1000000) {
         printf("%d", number);
     }
 }

 int is_couple(char *massive) {
     char *p, *p2, *p3;
     int result = 1;
     p = strstr(massive, " -v ");
     if (p == NULL) {
         p2 = strstr(massive, " -e ");
         p3 = strstr(massive, " -t ");
         if (p2 != NULL || p3 != NULL) {
             result = 0;
         }
     }
     return result;
 }

 
 */

